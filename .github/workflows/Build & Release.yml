name: Build & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_ARCH: 'x64'
  OS_ENV: 'Windows_x64'

jobs:
  build:
    runs-on: windows-latest

    outputs:
      output_name: ${{ steps.generate-output.outputs.result }}
      version: ${{ steps.generate-output.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ env.BUILD_ARCH }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate Output Name
        id: generate-output
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8

          try {
            $PY_VER = python -c "import sys;print(sys.version.split(' ')[0])"
            $VERSION = python -c "from src.main import VERSION;print(VERSION)"
          } catch {
            Write-Error "ERROR: $_"
            exit 1
          }
          $OUTPUT_NAME = "TAS_v${VERSION}_$($env:OS_ENV)_Py${PY_VER}.exe"

          Write-Output "Python Version: $PY_VER"
          Write-Output "TAS Version: $VERSION"
          Write-Output "Generate Output Name: $OUTPUT_NAME"
          
          echo "OUTPUT_NAME=$OUTPUT_NAME" >> $env:GITHUB_ENV
          echo "result=$OUTPUT_NAME" >> $env:GITHUB_OUTPUT
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT

      - name: Compile with Nuitka
        run: |
          python -m nuitka --mingw64 --assume-yes-for-downloads --show-progress --show-memory --standalone --onefile --windows-console-mode=disable --plugin-enable=pyside6 --output-filename=${{ env.OUTPUT_NAME }} --output-dir=output --remove-output --lto=yes --jobs=8 .\launcher.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: output/${{ env.OUTPUT_NAME }}
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      packages: write
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.output_name }}
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/${{ needs.build.outputs.output_name }}
          name: ${{ needs.build.outputs.version }}
          tag_name: v${{ needs.build.outputs.version }}
          draft: false
          prerelease: false